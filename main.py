import re
import asyncio
import requests
import logging
from telethon import TelegramClient, events

# --- üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
logging.basicConfig(level=logging.INFO)

# --- üîπ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telethon (User API) ---
API_ID = 21679979  # –í–∞—à API ID
API_HASH = '14beec52e9c14c53628e3e038c6725c7'  # –í–∞—à API Hash
PHONE_NUMBER = '+77003080198'  # –í–∞—à –Ω–æ–º–µ—Ä Telegram

GROUP_ID = -1002344170059  # ID –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
BOT_CHAT_ID = '5380447145'  # ID —á–∞—Ç–∞ —Å –≤–∞—à–∏–º –±–æ—Ç–æ–º

# --- üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ User API ---
client = TelegramClient('anon', API_ID, API_HASH)

# --- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–∞ ---
def send_to_bot(message):
    url = f"https://api.telegram.org/bot8141334032:AAEnpNjpF-iEZQzlxf4fjbwq_vQAiiA6yXw/sendMessage"
    data = {"chat_id": BOT_CHAT_ID, "text": message}
    response = requests.post(url, data=data)
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç–∞: {message}, –æ—Ç–≤–µ—Ç: {response.status_code}")

# --- üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
def parse_trade_signal(message_text):
    start_index = message_text.find("BINANCE:")
    if start_index == -1:
        return None

    cleaned_text = message_text[start_index:]
    parts = cleaned_text.split(',')
    if len(parts) < 3:
        return None

    platform_action, currency_pair, price_part = parts[0], parts[1], parts[2]
    action = platform_action.split('-')[1] if '-' in platform_action else None
    price = price_part.split('=')[1].strip() if '=' in price_part else None

    if action and currency_pair and price:
        return {
            'platform': 'BINANCE',
            'action': action.strip(),
            'currency_pair': currency_pair.strip(),
            'price': float(price)
        }
    return None

# --- üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã ---
@client.on(events.NewMessage(chats=GROUP_ID))
async def handler(event):
    text = event.raw_text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {text}")  # –õ–û–ì –î–õ–Ø –ü–†–û–í–ï–†–ö–ò!

    signal_info = parse_trade_signal(text)

    if signal_info:
        message = (f"–°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {signal_info['action']} –Ω–∞ {signal_info['currency_pair']} "
                   f"–ø–æ —Ü–µ–Ω–µ {signal_info['price']}")
        logging.info(f"–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–∞: {message}")  # –õ–û–ì –î–õ–Ø –ü–†–û–í–ï–†–ö–ò!
        send_to_bot(message)

# --- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
class FakeEvent:
    def __init__(self, text):
        self.raw_text = text  # Telethon –∏—Å–ø–æ–ª—å–∑—É–µ—Ç raw_text –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

async def test_handler():
    logging.info("=== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ===")

    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    fake_event = FakeEvent("BINANCE:ENTER-LONGüü¢,BTCUSDT,üí≤current price = 50000")

    # –í—ã–∑—ã–≤–∞–µ–º handler() –≤—Ä—É—á–Ω—É—é
    await handler(fake_event)

    logging.info("=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")

# --- üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Telethon ---
async def start_client():
    await client.start(PHONE_NUMBER)
    logging.info("Telethon —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    loop.create_task(test_handler())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await client.run_until_disconnected()

# --- üîπ –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ ---
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.run_until_complete(start_client())
